/*
 * Copyright (c) 2025 SystemFalse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.github.systemfalse.wolfbot.service;

import io.github.systemfalse.wolfbot.bot.TelegramBot;
import io.github.systemfalse.wolfbot.model.ImageStatus;
import io.github.systemfalse.wolfbot.model.Moderator;
import io.github.systemfalse.wolfbot.model.WolfImage;
import io.github.systemfalse.wolfbot.repository.ModeratorRepository;
import io.github.systemfalse.wolfbot.repository.WolfImageRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.io.ByteArrayInputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class ModerationService {

    private TelegramBot telegramBot;
    private final ModeratorRepository moderatorRepository;
    private final WolfImageRepository wolfImageRepository;
    private final NotificationService notificationService;

    public void initBot(TelegramBot telegramBot) {
        this.telegramBot = telegramBot;
        notificationService.initBot(telegramBot);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
     */
    @Transactional
    public void submitForModeration(WolfImage image) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: ID {}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}",
                image.getId(), image.getUploadedBy().getTelegramId());

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        List<Moderator> activeModerators = moderatorRepository.findByActiveTrueOrderByAddedAtDesc();

        if (activeModerators.isEmpty()) {
            log.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ID: {}", image.getId());
            // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        for (Moderator moderator : activeModerators) {
            try {
                sendImageToModerator(image, moderator);
                log.debug("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {}",
                        image.getId(), moderator.getTelegramId());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ID {} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {}: ",
                        image.getId(), moderator.getTelegramId(), e);
            }
        }

        log.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º",
                image.getId(), activeModerators.size());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
     */
    private void sendImageToModerator(WolfImage image, Moderator moderator) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            String caption = buildModerationCaption(image);

            // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            InlineKeyboardMarkup keyboard = createModerationKeyboard(image.getId());

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
            SendPhoto sendPhoto = SendPhoto.builder()
                    .chatId(moderator.getTelegramId().toString())
                    .photo(new InputFile(new ByteArrayInputStream(image.getFileData()),
                            image.getFileName()))
                    .caption(caption)
                    .parseMode("HTML")
                    .replyMarkup(keyboard)
                    .build();

            telegramBot.execute(sendPhoto);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {}: ",
                    moderator.getTelegramId(), e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É", e);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    private String buildModerationCaption(WolfImage image) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

        return String.format(
                "üîç <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n" +
                        "üì∏ <b>ID:</b> %s\n" +
                        "üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> %s\n" +
                        "üìÖ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</b> %s\n" +
                        "üìè <b>–†–∞–∑–º–µ—Ä:</b> %.1f –ö–ë\n" +
                        "üóÇ <b>–¢–∏–ø:</b> %s\n\n" +
                        "‚ùì <b>–û–¥–æ–±—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏?</b>",
                image.getId(),
                image.getUploadedBy().getDisplayName(),
                image.getUploadedAt().format(formatter),
                image.getFileSize() / 1024.0,
                image.getMimeType()
        );
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    private InlineKeyboardMarkup createModerationKeyboard(Long imageId) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(InlineKeyboardButton.builder()
                .text("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å")
                .callbackData("moderate_approve_" + imageId)
                .build());
        row1.add(InlineKeyboardButton.builder()
                .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                .callbackData("moderate_reject_" + imageId)
                .build());

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(InlineKeyboardButton.builder()
                .text("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞—Ä—É—à–µ–Ω–∏–µ)")
                .callbackData("moderate_block_" + imageId)
                .build());

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(InlineKeyboardButton.builder()
                .text("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")
                .callbackData("moderate_details_" + imageId)
                .build());

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        return InlineKeyboardMarkup.builder()
                .keyboard(keyboard)
                .build();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    @Transactional
    public void processModerationDecision(Long imageId, Long moderatorTelegramId,
                                          ImageStatus decision, String reason) {

        log.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä {}, —Ä–µ—à–µ–Ω–∏–µ {}",
                imageId, moderatorTelegramId, decision);

        // –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Optional<WolfImage> imageOpt = wolfImageRepository.findById(imageId);
        if (imageOpt.isEmpty()) {
            log.warn("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ID {}", imageId);
            return;
        }

        WolfImage image = imageOpt.get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
        if (image.getStatus() != ImageStatus.PENDING) {
            log.warn("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID {} —É–∂–µ –ø—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Å—Ç–∞—Ç—É—Å {}",
                    imageId, image.getStatus());
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        Optional<Moderator> moderatorOpt = moderatorRepository.findByTelegramId(moderatorTelegramId);
        if (moderatorOpt.isEmpty()) {
            log.warn("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: Telegram ID {}", moderatorTelegramId);
            return;
        }

        Moderator moderator = moderatorOpt.get();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image.moderate(decision, moderator, reason);
        wolfImageRepository.save(image);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–π —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator.incrementModerationCount();
        moderatorRepository.save(moderator);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        notifyUserAboutModerationResult(image);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏
        notifyModeratorAboutDecision(moderator, image, decision);

        log.info("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {} –ø–æ–ª—É—á–∏–ª–æ —Å—Ç–∞—Ç—É—Å {}",
                imageId, decision);
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    private void notifyUserAboutModerationResult(WolfImage image) {
        Long userId = image.getUploadedBy().getTelegramId();
        String message;

        switch (image.getStatus()) {
            case APPROVED -> {
                message = String.format(
                        "‚úÖ <b>–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!</b>\n\n" +
                                "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #%s –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.\n" +
                                "–¢–µ–ø–µ—Ä—å –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n\n" +
                                "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!",
                        image.getId()
                );
            }
            case REJECTED -> {
                message = String.format(
                        "‚ùå <b>–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n" +
                                "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #%s –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n" +
                                "%s\n\n" +
                                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ª–∫–∞ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.",
                        image.getId(),
                        image.getModerationReason() != null ?
                                "–ü—Ä–∏—á–∏–Ω–∞: " + image.getModerationReason() :
                                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
                );
            }
            case BLOCKED -> {
                message = String.format(
                        "üö´ <b>–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n" +
                                "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #%s –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n" +
                                "%s\n\n" +
                                "‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.",
                        image.getId(),
                        image.getModerationReason() != null ?
                                "–ü—Ä–∏—á–∏–Ω–∞: " + image.getModerationReason() :
                                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
                );
            }
            default -> {
                log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {}", image.getStatus());
                return;
            }
        }

        try {
            telegramBot.sendTextMessage(userId, message);
            log.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {}",
                    userId, image.getId());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: ", userId, e);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏
     */
    private void notifyModeratorAboutDecision(Moderator moderator, WolfImage image, ImageStatus decision) {
        String statusText = switch (decision) {
            case APPROVED -> "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–æ";
            case REJECTED -> "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ";
            case BLOCKED -> "üö´ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ";
            default -> "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ";
        };

        String message = String.format(
                "üëç <b>–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>\n\n" +
                        "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #%d %s\n" +
                        "üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n" +
                        "üìä –í–∞—à–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–π: %d",
                image.getId(),
                statusText,
                image.getUploadedBy().getDisplayName(),
                moderator.getModerationCount()
        );

        try {
            telegramBot.sendTextMessage(moderator.getTelegramId(), message);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {}: ",
                    moderator.getTelegramId(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    public void sendImageDetails(Long imageId, Long moderatorTelegramId) {
        Optional<WolfImage> imageOpt = wolfImageRepository.findById(imageId);
        if (imageOpt.isEmpty()) {
            telegramBot.sendTextMessage(moderatorTelegramId,
                    "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.");
            return;
        }

        WolfImage image = imageOpt.get();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        long userTotalImages = wolfImageRepository.countByUploadedByTelegramId(
                image.getUploadedBy().getTelegramId());
        long userApprovedImages = wolfImageRepository
                .countByUploadedByTelegramIdAndStatus(
                        image.getUploadedBy().getTelegramId(), ImageStatus.APPROVED);

        String detailsMessage = String.format(
                "üîç <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n" +
                        "üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #%s</b>\n" +
                        "üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: %s\n" +
                        "üìè –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç (%.1f –ö–ë)\n" +
                        "üóÇ MIME —Ç–∏–ø: %s\n" +
                        "üìÇ –ò–º—è —Ñ–∞–π–ª–∞: %s\n\n" +
                        "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n" +
                        "üÜî ID: %d\n" +
                        "üë§ –ò–º—è: %s\n" +
                        "üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–∏–ª: %d\n" +
                        "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: %d\n" +
                        "üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s\n" +
                        "üì± –ü–æ–¥–ø–∏—Å–∞–Ω: %s",
                image.getId(),
                image.getUploadedAt().format(formatter),
                image.getFileSize(),
                image.getFileSize() / 1024.0,
                image.getMimeType(),
                image.getFileName(),
                image.getUploadedBy().getTelegramId(),
                image.getUploadedBy().getDisplayName(),
                userTotalImages,
                userApprovedImages,
                image.getUploadedBy().getRegisteredAt().format(formatter),
                image.getUploadedBy().isSubscribed() ? "–î–∞" : "–ù–µ—Ç"
        );

        telegramBot.sendTextMessage(moderatorTelegramId, detailsMessage);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    public ModerationStats getModerationStats() {
        long totalPending = wolfImageRepository.countByStatus(ImageStatus.PENDING);
        long totalApproved = wolfImageRepository.countByStatus(ImageStatus.APPROVED);
        long totalRejected = wolfImageRepository.countByStatus(ImageStatus.REJECTED);
        long totalBlocked = wolfImageRepository.countByStatus(ImageStatus.BLOCKED);
        long activeModerators = moderatorRepository.countByActiveTrue();

        return new ModerationStats(
                totalPending, totalApproved, totalRejected, totalBlocked, activeModerators);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    public List<WolfImage> getPendingImages() {
        return wolfImageRepository.findByStatusOrderByUploadedAtAsc(ImageStatus.PENDING);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ N —á–∞—Å–æ–≤)
     */
    public List<WolfImage> getStaleImages(int hoursOld) {
        LocalDateTime threshold = LocalDateTime.now().minusHours(hoursOld);
        return wolfImageRepository.findByStatusAndUploadedAtBefore(ImageStatus.PENDING, threshold);
    }

    /**
     * –ù–∞–ø–æ–º–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    public void sendModerationReminder() {
        List<WolfImage> pendingImages = getPendingImages();
        if (pendingImages.isEmpty()) {
            return;
        }

        List<Moderator> activeModerators = moderatorRepository.findByActiveTrueOrderByAddedAtDesc();
        if (activeModerators.isEmpty()) {
            log.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è");
            return;
        }

        String reminderMessage = String.format(
                "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n" +
                        "üì∏ –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n" +
                        "üïê –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %s\n\n" +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ.",
                pendingImages.size(),
                pendingImages.getFirst().getUploadedAt().format(
                        DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );

        for (Moderator moderator : activeModerators) {
            try {
                telegramBot.sendTextMessage(moderator.getTelegramId(), reminderMessage);
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {}: ",
                        moderator.getTelegramId(), e);
            }
        }

        log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –æ {} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö",
                activeModerators.size(), pendingImages.size());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
     */
    public boolean isModerator(Long telegramId) {
        return moderatorRepository.findByTelegramId(telegramId)
                .map(Moderator::getActive)
                .orElse(false);
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    @Transactional
    public void autoApproveImage(Long imageId, String reason) {
        Optional<WolfImage> imageOpt = wolfImageRepository.findById(imageId);
        if (imageOpt.isEmpty()) {
            log.warn("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ID {}", imageId);
            return;
        }

        WolfImage image = imageOpt.get();
        if (image.getStatus() != ImageStatus.PENDING) {
            log.warn("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID {} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Å—Ç–∞—Ç—É—Å {}", imageId, image.getStatus());
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
        Moderator systemModerator = moderatorRepository.findByActiveTrueOrderByAddedAtDesc()
                .stream()
                .findFirst()
                .orElse(null);

        if (systemModerator != null) {
            image.moderate(ImageStatus.APPROVED, systemModerator, reason);
            wolfImageRepository.save(image);

            notifyUserAboutModerationResult(image);
            log.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ", imageId);
        } else {
            log.warn("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ID {}", imageId);
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    public record ModerationStats(
            long pendingImages,
            long approvedImages,
            long rejectedImages,
            long blockedImages,
            long activeModerators
    ) {}
}