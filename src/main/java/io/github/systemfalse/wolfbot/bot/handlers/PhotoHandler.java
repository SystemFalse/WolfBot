/*
 * Copyright (c) 2025 SystemFalse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.github.systemfalse.wolfbot.bot.handlers;

import io.github.systemfalse.wolfbot.bot.TelegramBot;
import io.github.systemfalse.wolfbot.config.BotConfig;
import io.github.systemfalse.wolfbot.model.User;
import io.github.systemfalse.wolfbot.model.WolfImage;
import io.github.systemfalse.wolfbot.service.ImageService;
import io.github.systemfalse.wolfbot.service.ModerationService;
import io.github.systemfalse.wolfbot.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Comparator;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class PhotoHandler {

    private TelegramBot telegramBot;
    private final ImageService imageService;
    private final UserService userService;
    private final ModerationService moderationService;
    private final BotConfig botConfig;

    public void initBot(TelegramBot telegramBot) {
        this.telegramBot = telegramBot;
        moderationService.initBot(telegramBot);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     */
    public void handlePhoto(Message message) {
        Long userId = message.getFrom().getId();
        Long chatId = message.getChatId();

        log.info("–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = userService.findOrCreateUser(message.getFrom());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!checkUserLimits(user, chatId)) {
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            PhotoSize photo = getBestQualityPhoto(message.getPhoto());
            if (photo == null) {
                telegramBot.sendTextMessage(chatId,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if (photo.getFileSize() > botConfig.getMaxFileSize()) {
                telegramBot.sendTextMessage(chatId,
                        String.format("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (%.1f –ú–ë). " +
                                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: %.1f –ú–ë",
                                photo.getFileSize() / 1024.0 / 1024.0,
                                botConfig.getMaxFileSize() / 1024.0 / 1024.0));
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
            byte[] imageData = downloadPhoto(photo);
            if (imageData == null) {
                telegramBot.sendTextMessage(chatId,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            String mimeType = detectMimeType(imageData);
            if (!isValidImageType(mimeType)) {
                telegramBot.sendTextMessage(chatId,
                        "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. " +
                                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, WebP");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            WolfImage wolfImage = WolfImage.builder()
                    .fileName(generateFileName(photo.getFileId(), mimeType))
                    .fileData(imageData)
                    .fileSize((long) imageData.length)
                    .mimeType(mimeType)
                    .uploadedBy(user)
                    .build();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            WolfImage savedImage = imageService.saveImage(wolfImage);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            moderationService.submitForModeration(savedImage);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String successMessage = String.format(
                    "‚úÖ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!</b>\n\n" +
                            "üì∏ –†–∞–∑–º–µ—Ä: %.1f –ö–ë\n" +
                            "üîç –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n" +
                            "‚è≥ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: %s\n\n" +
                            "–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏, " +
                            "–ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.",
                    imageData.length / 1024.0,
                    java.time.LocalDateTime.now().format(
                            java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
            );

            telegramBot.sendTextMessage(chatId, successMessage);

            log.info("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. ID: {}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}",
                    savedImage.getId(), userId);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: ", userId, e);
            telegramBot.sendTextMessage(chatId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. " +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private boolean checkUserLimits(User user, Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        long imagesLastHour = imageService.countUserImagesLastHour(user.getTelegramId());
        int maxImagesPerHour = 5; // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

        if (imagesLastHour >= maxImagesPerHour) {
            telegramBot.sendTextMessage(chatId,
                    String.format("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n" +
                            "–ú–∞–∫—Å–∏–º—É–º %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Å.\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", maxImagesPerHour));
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
        long pendingImages = imageService.countUserPendingImages(user.getTelegramId());
        int maxPendingImages = 3; // –ú–∞–∫—Å–∏–º—É–º –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏

        if (pendingImages >= maxPendingImages) {
            telegramBot.sendTextMessage(chatId,
                    String.format("‚è≥ –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (%d).\n" +
                            "–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", pendingImages));
            return false;
        }

        return true;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
     */
    private PhotoSize getBestQualityPhoto(List<PhotoSize> photos) {
        if (photos == null || photos.isEmpty()) {
            return null;
        }

        return photos.stream()
                .max(Comparator.comparing(PhotoSize::getFileSize))
                .orElse(photos.get(photos.size() - 1));
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
     */
    private byte[] downloadPhoto(PhotoSize photo) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            GetFile getFile = GetFile.builder()
                    .fileId(photo.getFileId())
                    .build();

            File file = telegramBot.execute(getFile);

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            String fileUrl = "https://api.telegram.org/file/bot" +
                    telegramBot.getBotToken() + "/" + file.getFilePath();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            try (InputStream inputStream = new URL(fileUrl).openStream()) {
                byte[] imageData = IOUtils.toByteArray(inputStream);
                log.debug("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {} –±–∞–π—Ç", imageData.length);
                return imageData;
            }

        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ", e);
        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ IO –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ", e);
        }

        return null;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String detectMimeType(byte[] imageData) {
        if (imageData.length < 4) {
            return "application/octet-stream";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
        if (imageData[0] == (byte) 0xFF && imageData[1] == (byte) 0xD8) {
            return "image/jpeg";
        }

        if (imageData[0] == (byte) 0x89 && imageData[1] == (byte) 0x50 &&
                imageData[2] == (byte) 0x4E && imageData[3] == (byte) 0x47) {
            return "image/png";
        }

        if (imageData[0] == (byte) 0x52 && imageData[1] == (byte) 0x49 &&
                imageData[2] == (byte) 0x46 && imageData[3] == (byte) 0x46 &&
                imageData.length > 12 &&
                imageData[8] == (byte) 0x57 && imageData[9] == (byte) 0x45 &&
                imageData[10] == (byte) 0x42 && imageData[11] == (byte) 0x50) {
            return "image/webp";
        }

        return "application/octet-stream";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private boolean isValidImageType(String mimeType) {
        return mimeType.equals("image/jpeg") ||
                mimeType.equals("image/png") ||
                mimeType.equals("image/webp");
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞
     */
    private String generateFileName(String fileId, String mimeType) {
        String extension = switch (mimeType) {
            case "image/jpeg" -> ".jpg";
            case "image/png" -> ".png";
            case "image/webp" -> ".webp";
            default -> ".jpg";
        };

        return "wolf_" + fileId + "_" + System.currentTimeMillis() + extension;
    }
}
