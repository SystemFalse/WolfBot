/*
 * Copyright (c) 2025 SystemFalse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.github.systemfalse.wolfbot.bot.handlers;

import io.github.systemfalse.wolfbot.bot.TelegramBot;
import io.github.systemfalse.wolfbot.model.ImageStatus;
import io.github.systemfalse.wolfbot.service.ModerationService;
import io.github.systemfalse.wolfbot.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class CallbackHandler {

    private TelegramBot telegramBot;
    private final ModerationService moderationService;
    private final UserService userService;

    public void initBot(TelegramBot telegramBot) {
        this.telegramBot = telegramBot;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–∞
     */
    public void handleCallback(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        Long userId = callbackQuery.getFrom().getId();
        String messageId = callbackQuery.getMessage().getMessageId().toString();
        Long chatId = callbackQuery.getMessage().getChatId();

        log.info("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, callbackData);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
            if (!moderationService.isModerator(userId)) {
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", true);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
            if (callbackData.startsWith("moderate_")) {
                handleModerationCallback(callbackQuery, callbackData);
            } else if (callbackData.startsWith("schedule_")) {
                handleScheduleCallback(callbackQuery, callbackData);
            } else {
                log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {}", callbackData);
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", true);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {}: ", callbackData, e);
            answerCallbackQuery(callbackQuery.getId(),
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", true);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    private void handleModerationCallback(CallbackQuery callbackQuery, String callbackData) {
        String[] parts = callbackData.split("_");
        if (parts.length < 3) {
            answerCallbackQuery(callbackQuery.getId(),
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.", true);
            return;
        }

        String action = parts[1]; // approve, reject, block, details
        Long imageId;

        try {
            imageId = Long.parseLong(parts[2]);
        } catch (NumberFormatException e) {
            answerCallbackQuery(callbackQuery.getId(),
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", true);
            return;
        }

        Long moderatorId = callbackQuery.getFrom().getId();

        switch (action) {
            case "approve" -> {
                moderationService.processModerationDecision(
                        imageId, moderatorId, ImageStatus.APPROVED, null);

                // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                removeInlineKeyboard(callbackQuery);
                answerCallbackQuery(callbackQuery.getId(),
                        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!", false);
            }
            case "reject" -> {
                moderationService.processModerationDecision(
                        imageId, moderatorId, ImageStatus.REJECTED, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º");

                removeInlineKeyboard(callbackQuery);
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!", false);
            }
            case "block" -> {
                moderationService.processModerationDecision(
                        imageId, moderatorId, ImageStatus.BLOCKED, "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞");

                removeInlineKeyboard(callbackQuery);
                answerCallbackQuery(callbackQuery.getId(),
                        "üö´ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!", false);
            }
            case "details" -> {
                moderationService.sendImageDetails(imageId, moderatorId);
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", false);
            }
            default -> {
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", true);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    private void handleScheduleCallback(CallbackQuery callbackQuery, String callbackData) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É callback'–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä: schedule_set_daily_12, schedule_cancel, etc.

        String[] parts = callbackData.split("_");
        if (parts.length < 2) {
            answerCallbackQuery(callbackQuery.getId(),
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", true);
            return;
        }

        String action = parts[1];
        Long userId = callbackQuery.getFrom().getId();

        switch (action) {
            case "daily" -> {
                if (parts.length >= 3) {
                    String hour = parts[2];
                    // –õ–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    answerCallbackQuery(callbackQuery.getId(),
                            "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + hour + ":00", false);
                }
            }
            case "cancel" -> {
                // –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", false);
            }
            default -> {
                answerCallbackQuery(callbackQuery.getId(),
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", true);
            }
        }
    }

    /**
     * –£–±—Ä–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void removeInlineKeyboard(CallbackQuery callbackQuery) {
        try {
            EditMessageReplyMarkup editMarkup = EditMessageReplyMarkup.builder()
                    .chatId(callbackQuery.getMessage().getChatId().toString())
                    .messageId(callbackQuery.getMessage().getMessageId())
                    .replyMarkup(InlineKeyboardMarkup.builder()
                            .keyboard(createProcessedKeyboard())
                            .build())
                    .build();

            telegramBot.execute(editMarkup);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ", e);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private List<List<InlineKeyboardButton>> createProcessedKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        row.add(InlineKeyboardButton.builder()
                .text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                .callbackData("processed")
                .build());

        keyboard.add(row);
        return keyboard;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
     */
    private void answerCallbackQuery(String callbackQueryId, String text, boolean showAlert) {
        try {
            AnswerCallbackQuery answer = AnswerCallbackQuery.builder()
                    .callbackQueryId(callbackQueryId)
                    .text(text)
                    .showAlert(showAlert)
                    .build();

            telegramBot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback –∑–∞–ø—Ä–æ—Å: ", e);
        }
    }
}
