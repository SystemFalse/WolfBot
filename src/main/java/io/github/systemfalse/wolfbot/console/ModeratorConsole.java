/*
 * Copyright (c) 2025 SystemFalse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.github.systemfalse.wolfbot.console;

import io.github.systemfalse.wolfbot.model.Moderator;
import io.github.systemfalse.wolfbot.service.ModeratorService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Scanner;

@Component
@RequiredArgsConstructor
@Slf4j
public class ModeratorConsole implements CommandLineRunner {

    private final ModeratorService moderatorService;
    private final ApplicationContext applicationContext;

    public static void main(String[] args) {
        System.setProperty("spring.main.web-application-type", "none");
        System.setProperty("telegram.bot.enabled", "false");
        SpringApplication.run(ModeratorConsole.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
        if (args.length > 0 && "moderator-console".equals(args[0])) {
            runModeratorConsole();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
     */
    public void runModeratorConsole() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("=================================");
        System.out.println("üê∫ Wolf Bot - –ö–æ–Ω—Å–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤");
        System.out.println("=================================");
        System.out.println();

        while (true) {
            printMenu();
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            String choice = scanner.nextLine().trim();

            try {
                switch (choice) {
                    case "1" -> listModerators();
                    case "2" -> addModerator(scanner);
                    case "3" -> removeModerator(scanner);
                    case "4" -> activateModerator(scanner);
                    case "5" -> deactivateModerator(scanner);
                    case "6" -> showModeratorStats(scanner);
                    case "7" -> exportModerators();
                    case "0" -> {
                        System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏...");
                        return;
                    }
                    default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                }
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
                log.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: ", e);
            }

            System.out.println();
        }
    }

    /**
     * –ü–µ—á–∞—Ç—å –º–µ–Ω—é
     */
    private void printMenu() {
        System.out.println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        System.out.println("1. –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤");
        System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println("3. –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println("4. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println("5. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println("7. –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤");
        System.out.println("0. –í—ã—Ö–æ–¥");
        System.out.println();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
     */
    private void listModerators() {
        List<Moderator> moderators = moderatorService.getAllModerators();

        if (moderators.isEmpty()) {
            System.out.println("üìù –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            return;
        }

        System.out.println("üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:");
        System.out.println("‚îÄ".repeat(80));
        System.out.printf("%-5s %-12s %-20s %-15s %-10s %-12s%n",
                "ID", "Telegram ID", "–ò–º—è", "Username", "–°—Ç–∞—Ç—É—Å", "–ú–æ–¥–µ—Ä–∞—Ü–∏–π");
        System.out.println("‚îÄ".repeat(80));

        for (Moderator moderator : moderators) {
            System.out.printf("%-5d %-12d %-20s %-15s %-10s %-12d%n",
                    moderator.getId(),
                    moderator.getTelegramId(),
                    truncate(moderator.getDisplayName(), 20),
                    truncate(moderator.getUsername() != null ? "@" + moderator.getUsername() : "-", 15),
                    moderator.getActive() ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                    moderator.getModerationCount());
        }

        System.out.println("‚îÄ".repeat(80));
        System.out.printf("–í—Å–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: %d (–∞–∫—Ç–∏–≤–Ω—ã—Ö: %d)%n",
                moderators.size(),
                moderators.stream().mapToInt(m -> m.getActive() ? 1 : 0).sum());
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    private void addModerator(Scanner scanner) {
        System.out.println("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println();

        System.out.print("Telegram ID: ");
        String telegramIdStr = scanner.nextLine().trim();

        long telegramId;
        try {
            telegramId = Long.parseLong(telegramIdStr);
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID
        if (moderatorService.findByTelegramId(telegramId).isPresent()) {
            System.out.println("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
            return;
        }

        System.out.print("Username (–±–µ–∑ @, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ");
        String username = scanner.nextLine().trim();
        if (username.isEmpty()) {
            username = null;
        }

        System.out.print("–ò–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ");
        String firstName = scanner.nextLine().trim();
        if (firstName.isEmpty()) {
            firstName = null;
        }

        try {
            Moderator moderator = moderatorService.addModerator(telegramId, username, firstName);
            System.out.printf("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: %d%n", moderator.getId());
            System.out.printf("üìß –£–≤–µ–¥–æ–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID %d –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.%n", telegramId);
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    private void removeModerator(Scanner scanner) {
        System.out.println("‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        String telegramIdStr = scanner.nextLine().trim();

        long telegramId;
        try {
            telegramId = Long.parseLong(telegramIdStr);
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }

        var moderatorOpt = moderatorService.findByTelegramId(telegramId);
        if (moderatorOpt.isEmpty()) {
            System.out.println("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        Moderator moderator = moderatorOpt.get();
        System.out.printf("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: %s (ID: %d)%n", moderator.getDisplayName(), moderator.getId());
        System.out.printf("–í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %d%n", moderator.getModerationCount());
        System.out.println();

        System.out.print("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞? (yes/no): ");
        String confirmation = scanner.nextLine().trim().toLowerCase();

        if ("yes".equals(confirmation) || "y".equals(confirmation) || "–¥–∞".equals(confirmation)) {
            try {
                moderatorService.removeModerator(telegramId);
                System.out.println("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage());
            }
        } else {
            System.out.println("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        }
    }

    /**
     * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    private void activateModerator(Scanner scanner) {
        System.out.println("üîì –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: ");
        String telegramIdStr = scanner.nextLine().trim();

        long telegramId;
        try {
            telegramId = Long.parseLong(telegramIdStr);
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }

        try {
            boolean result = moderatorService.setModeratorActive(telegramId, true);
            if (result) {
                System.out.println("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
            } else {
                System.out.println("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    private void deactivateModerator(Scanner scanner) {
        System.out.println("üîí –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: ");
        String telegramIdStr = scanner.nextLine().trim();

        long telegramId;
        try {
            telegramId = Long.parseLong(telegramIdStr);
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }

        try {
            boolean result = moderatorService.setModeratorActive(telegramId, false);
            if (result) {
                System.out.println("‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
            } else {
                System.out.println("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
     */
    private void showModeratorStats(Scanner scanner) {
        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞");
        System.out.println();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: ");
        String telegramIdStr = scanner.nextLine().trim();

        long telegramId;
        try {
            telegramId = Long.parseLong(telegramIdStr);
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            return;
        }

        var moderatorOpt = moderatorService.findByTelegramId(telegramId);
        if (moderatorOpt.isEmpty()) {
            System.out.println("‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        Moderator moderator = moderatorOpt.get();
        var stats = moderatorService.getModeratorStats(telegramId);

        System.out.println("‚îÄ".repeat(50));
        System.out.printf("üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: %s%n", moderator.getDisplayName());
        System.out.printf("üÜî Telegram ID: %d%n", moderator.getTelegramId());
        System.out.printf("üë§ Username: %s%n", moderator.getUsername() != null ? "@" + moderator.getUsername() : "–ù–µ —É–∫–∞–∑–∞–Ω");
        System.out.printf("üìÖ –î–æ–±–∞–≤–ª–µ–Ω: %s%n", moderator.getAddedAt().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
        System.out.printf("üîò –°—Ç–∞—Ç—É—Å: %s%n", moderator.getActive() ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω");
        System.out.println("‚îÄ".repeat(50));
        System.out.printf("üìä –í—Å–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ü–∏–π: %d%n", stats.totalModerations());
        System.out.printf("‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: %d%n", stats.approvedCount());
        System.out.printf("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: %d%n", stats.rejectedCount());
        System.out.printf("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: %d%n", stats.blockedCount());
        System.out.printf("üìÖ –ú–æ–¥–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: %d%n", stats.moderationsLastMonth());
        System.out.printf("üìÖ –ú–æ–¥–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: %d%n", stats.moderationsToday());
        System.out.println("‚îÄ".repeat(50));
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
     */
    private void exportModerators() {
        try {
            String filename = moderatorService.exportModerators();
            System.out.printf("‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª: %s%n", filename);
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: " + e.getMessage());
        }
    }

    /**
     * –û–±—Ä–µ–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
     */
    private String truncate(String str, int maxLength) {
        if (str == null) return "-";
        return str.length() > maxLength ? str.substring(0, maxLength - 3) + "..." : str;
    }
}
